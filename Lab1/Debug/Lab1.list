
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002588  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080026d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080026d4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009311  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190d  00000000  00000000  00029346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016696  00000000  00000000  0002bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8b0  00000000  00000000  00042606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822e4  00000000  00000000  0004ceb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf19a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000cf1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800267c 	.word	0x0800267c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800267c 	.word	0x0800267c

0800014c <display7SEG>:
		HAL_Delay(2000);
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);

	}
	void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81c9 	bhi.w	80004ee <display7SEG+0x3a2>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001e3 	.word	0x080001e3
 800016c:	08000239 	.word	0x08000239
 8000170:	0800028f 	.word	0x0800028f
 8000174:	080002e5 	.word	0x080002e5
 8000178:	0800033b 	.word	0x0800033b
 800017c:	08000391 	.word	0x08000391
 8000180:	080003e7 	.word	0x080003e7
 8000184:	0800043d 	.word	0x0800043d
 8000188:	08000499 	.word	0x08000499
		switch(num){
		case 0:
	           HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000192:	48c0      	ldr	r0, [pc, #768]	; (8000494 <display7SEG+0x348>)
 8000194:	f001 f9ca 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	48bd      	ldr	r0, [pc, #756]	; (8000494 <display7SEG+0x348>)
 80001a0:	f001 f9c4 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001aa:	48ba      	ldr	r0, [pc, #744]	; (8000494 <display7SEG+0x348>)
 80001ac:	f001 f9be 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b6:	48b7      	ldr	r0, [pc, #732]	; (8000494 <display7SEG+0x348>)
 80001b8:	f001 f9b8 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	48b4      	ldr	r0, [pc, #720]	; (8000494 <display7SEG+0x348>)
 80001c4:	f001 f9b2 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48b1      	ldr	r0, [pc, #708]	; (8000494 <display7SEG+0x348>)
 80001d0:	f001 f9ac 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001da:	48ae      	ldr	r0, [pc, #696]	; (8000494 <display7SEG+0x348>)
 80001dc:	f001 f9a6 	bl	800152c <HAL_GPIO_WritePin>
			   break;
 80001e0:	e185      	b.n	80004ee <display7SEG+0x3a2>
		case 1:
	           HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e8:	48aa      	ldr	r0, [pc, #680]	; (8000494 <display7SEG+0x348>)
 80001ea:	f001 f99f 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f4:	48a7      	ldr	r0, [pc, #668]	; (8000494 <display7SEG+0x348>)
 80001f6:	f001 f999 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	48a4      	ldr	r0, [pc, #656]	; (8000494 <display7SEG+0x348>)
 8000202:	f001 f993 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020c:	48a1      	ldr	r0, [pc, #644]	; (8000494 <display7SEG+0x348>)
 800020e:	f001 f98d 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	489e      	ldr	r0, [pc, #632]	; (8000494 <display7SEG+0x348>)
 800021a:	f001 f987 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	489b      	ldr	r0, [pc, #620]	; (8000494 <display7SEG+0x348>)
 8000226:	f001 f981 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	4898      	ldr	r0, [pc, #608]	; (8000494 <display7SEG+0x348>)
 8000232:	f001 f97b 	bl	800152c <HAL_GPIO_WritePin>
			   break;
 8000236:	e15a      	b.n	80004ee <display7SEG+0x3a2>

		case 2:
		       HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	4895      	ldr	r0, [pc, #596]	; (8000494 <display7SEG+0x348>)
 8000240:	f001 f974 	bl	800152c <HAL_GPIO_WritePin>
		       HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	4892      	ldr	r0, [pc, #584]	; (8000494 <display7SEG+0x348>)
 800024c:	f001 f96e 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	488f      	ldr	r0, [pc, #572]	; (8000494 <display7SEG+0x348>)
 8000258:	f001 f968 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000262:	488c      	ldr	r0, [pc, #560]	; (8000494 <display7SEG+0x348>)
 8000264:	f001 f962 	bl	800152c <HAL_GPIO_WritePin>
		       HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	4889      	ldr	r0, [pc, #548]	; (8000494 <display7SEG+0x348>)
 8000270:	f001 f95c 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4886      	ldr	r0, [pc, #536]	; (8000494 <display7SEG+0x348>)
 800027c:	f001 f956 	bl	800152c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000286:	4883      	ldr	r0, [pc, #524]	; (8000494 <display7SEG+0x348>)
 8000288:	f001 f950 	bl	800152c <HAL_GPIO_WritePin>
			  break;
 800028c:	e12f      	b.n	80004ee <display7SEG+0x3a2>
		case 3:
			  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <display7SEG+0x348>)
 8000296:	f001 f949 	bl	800152c <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a0:	487c      	ldr	r0, [pc, #496]	; (8000494 <display7SEG+0x348>)
 80002a2:	f001 f943 	bl	800152c <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ac:	4879      	ldr	r0, [pc, #484]	; (8000494 <display7SEG+0x348>)
 80002ae:	f001 f93d 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b8:	4876      	ldr	r0, [pc, #472]	; (8000494 <display7SEG+0x348>)
 80002ba:	f001 f937 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c4:	4873      	ldr	r0, [pc, #460]	; (8000494 <display7SEG+0x348>)
 80002c6:	f001 f931 	bl	800152c <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d0:	4870      	ldr	r0, [pc, #448]	; (8000494 <display7SEG+0x348>)
 80002d2:	f001 f92b 	bl	800152c <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002dc:	486d      	ldr	r0, [pc, #436]	; (8000494 <display7SEG+0x348>)
 80002de:	f001 f925 	bl	800152c <HAL_GPIO_WritePin>
		    break;
 80002e2:	e104      	b.n	80004ee <display7SEG+0x3a2>
		case 4:
			  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	486a      	ldr	r0, [pc, #424]	; (8000494 <display7SEG+0x348>)
 80002ec:	f001 f91e 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4867      	ldr	r0, [pc, #412]	; (8000494 <display7SEG+0x348>)
 80002f8:	f001 f918 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4864      	ldr	r0, [pc, #400]	; (8000494 <display7SEG+0x348>)
 8000304:	f001 f912 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	4861      	ldr	r0, [pc, #388]	; (8000494 <display7SEG+0x348>)
 8000310:	f001 f90c 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	485e      	ldr	r0, [pc, #376]	; (8000494 <display7SEG+0x348>)
 800031c:	f001 f906 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	485b      	ldr	r0, [pc, #364]	; (8000494 <display7SEG+0x348>)
 8000328:	f001 f900 	bl	800152c <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000332:	4858      	ldr	r0, [pc, #352]	; (8000494 <display7SEG+0x348>)
 8000334:	f001 f8fa 	bl	800152c <HAL_GPIO_WritePin>
		    break;
 8000338:	e0d9      	b.n	80004ee <display7SEG+0x3a2>
		case 5:
			  HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4854      	ldr	r0, [pc, #336]	; (8000494 <display7SEG+0x348>)
 8000342:	f001 f8f3 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4851      	ldr	r0, [pc, #324]	; (8000494 <display7SEG+0x348>)
 800034e:	f001 f8ed 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	484e      	ldr	r0, [pc, #312]	; (8000494 <display7SEG+0x348>)
 800035a:	f001 f8e7 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	484b      	ldr	r0, [pc, #300]	; (8000494 <display7SEG+0x348>)
 8000366:	f001 f8e1 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4848      	ldr	r0, [pc, #288]	; (8000494 <display7SEG+0x348>)
 8000372:	f001 f8db 	bl	800152c <HAL_GPIO_WritePin>
		   	  HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4845      	ldr	r0, [pc, #276]	; (8000494 <display7SEG+0x348>)
 800037e:	f001 f8d5 	bl	800152c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4842      	ldr	r0, [pc, #264]	; (8000494 <display7SEG+0x348>)
 800038a:	f001 f8cf 	bl	800152c <HAL_GPIO_WritePin>
			break;
 800038e:	e0ae      	b.n	80004ee <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000396:	483f      	ldr	r0, [pc, #252]	; (8000494 <display7SEG+0x348>)
 8000398:	f001 f8c8 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	483c      	ldr	r0, [pc, #240]	; (8000494 <display7SEG+0x348>)
 80003a4:	f001 f8c2 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	4839      	ldr	r0, [pc, #228]	; (8000494 <display7SEG+0x348>)
 80003b0:	f001 f8bc 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ba:	4836      	ldr	r0, [pc, #216]	; (8000494 <display7SEG+0x348>)
 80003bc:	f001 f8b6 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	4833      	ldr	r0, [pc, #204]	; (8000494 <display7SEG+0x348>)
 80003c8:	f001 f8b0 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4830      	ldr	r0, [pc, #192]	; (8000494 <display7SEG+0x348>)
 80003d4:	f001 f8aa 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003de:	482d      	ldr	r0, [pc, #180]	; (8000494 <display7SEG+0x348>)
 80003e0:	f001 f8a4 	bl	800152c <HAL_GPIO_WritePin>
			break;
 80003e4:	e083      	b.n	80004ee <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	4829      	ldr	r0, [pc, #164]	; (8000494 <display7SEG+0x348>)
 80003ee:	f001 f89d 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	4826      	ldr	r0, [pc, #152]	; (8000494 <display7SEG+0x348>)
 80003fa:	f001 f897 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	4823      	ldr	r0, [pc, #140]	; (8000494 <display7SEG+0x348>)
 8000406:	f001 f891 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	4820      	ldr	r0, [pc, #128]	; (8000494 <display7SEG+0x348>)
 8000412:	f001 f88b 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041c:	481d      	ldr	r0, [pc, #116]	; (8000494 <display7SEG+0x348>)
 800041e:	f001 f885 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	481a      	ldr	r0, [pc, #104]	; (8000494 <display7SEG+0x348>)
 800042a:	f001 f87f 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000434:	4817      	ldr	r0, [pc, #92]	; (8000494 <display7SEG+0x348>)
 8000436:	f001 f879 	bl	800152c <HAL_GPIO_WritePin>
			break;
 800043a:	e058      	b.n	80004ee <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <display7SEG+0x348>)
 8000444:	f001 f872 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <display7SEG+0x348>)
 8000450:	f001 f86c 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <display7SEG+0x348>)
 800045c:	f001 f866 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000466:	480b      	ldr	r0, [pc, #44]	; (8000494 <display7SEG+0x348>)
 8000468:	f001 f860 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000472:	4808      	ldr	r0, [pc, #32]	; (8000494 <display7SEG+0x348>)
 8000474:	f001 f85a 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <display7SEG+0x348>)
 8000480:	f001 f854 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048a:	4802      	ldr	r0, [pc, #8]	; (8000494 <display7SEG+0x348>)
 800048c:	f001 f84e 	bl	800152c <HAL_GPIO_WritePin>
			break;
 8000490:	e02d      	b.n	80004ee <display7SEG+0x3a2>
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	4816      	ldr	r0, [pc, #88]	; (80004f8 <display7SEG+0x3ac>)
 80004a0:	f001 f844 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004aa:	4813      	ldr	r0, [pc, #76]	; (80004f8 <display7SEG+0x3ac>)
 80004ac:	f001 f83e 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <display7SEG+0x3ac>)
 80004b8:	f001 f838 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <display7SEG+0x3ac>)
 80004c4:	f001 f832 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <display7SEG+0x3ac>)
 80004d0:	f001 f82c 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <display7SEG+0x3ac>)
 80004dc:	f001 f826 	bl	800152c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <display7SEG+0x3ac>)
 80004e8:	f001 f820 	bl	800152c <HAL_GPIO_WritePin>
			break;
 80004ec:	bf00      	nop

		}
	}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800

080004fc <display7Seg2>:
		display7SEG(count);
		HAL_Delay(1000);
		count++;
		return count;
	}
	void display7Seg2(int num){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b09      	cmp	r3, #9
 8000508:	f200 81b2 	bhi.w	8000870 <display7Seg2+0x374>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <display7Seg2+0x18>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	0800053d 	.word	0x0800053d
 8000518:	0800058f 	.word	0x0800058f
 800051c:	080005e1 	.word	0x080005e1
 8000520:	08000633 	.word	0x08000633
 8000524:	08000685 	.word	0x08000685
 8000528:	080006d7 	.word	0x080006d7
 800052c:	08000729 	.word	0x08000729
 8000530:	0800077b 	.word	0x0800077b
 8000534:	080007cd 	.word	0x080007cd
 8000538:	0800081f 	.word	0x0800081f
		switch(num){
			case 0:
		           HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	48cd      	ldr	r0, [pc, #820]	; (8000878 <display7Seg2+0x37c>)
 8000542:	f000 fff3 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	48cb      	ldr	r0, [pc, #812]	; (8000878 <display7Seg2+0x37c>)
 800054c:	f000 ffee 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	48c8      	ldr	r0, [pc, #800]	; (8000878 <display7Seg2+0x37c>)
 8000558:	f000 ffe8 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000562:	48c5      	ldr	r0, [pc, #788]	; (8000878 <display7Seg2+0x37c>)
 8000564:	f000 ffe2 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	48c2      	ldr	r0, [pc, #776]	; (8000878 <display7Seg2+0x37c>)
 8000570:	f000 ffdc 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057a:	48bf      	ldr	r0, [pc, #764]	; (8000878 <display7Seg2+0x37c>)
 800057c:	f000 ffd6 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000586:	48bc      	ldr	r0, [pc, #752]	; (8000878 <display7Seg2+0x37c>)
 8000588:	f000 ffd0 	bl	800152c <HAL_GPIO_WritePin>
				   break;
 800058c:	e170      	b.n	8000870 <display7Seg2+0x374>
			case 1:
		           HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	48b9      	ldr	r0, [pc, #740]	; (8000878 <display7Seg2+0x37c>)
 8000594:	f000 ffca 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	48b6      	ldr	r0, [pc, #728]	; (8000878 <display7Seg2+0x37c>)
 800059e:	f000 ffc5 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48b3      	ldr	r0, [pc, #716]	; (8000878 <display7Seg2+0x37c>)
 80005aa:	f000 ffbf 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	48b0      	ldr	r0, [pc, #704]	; (8000878 <display7Seg2+0x37c>)
 80005b6:	f000 ffb9 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	48ad      	ldr	r0, [pc, #692]	; (8000878 <display7Seg2+0x37c>)
 80005c2:	f000 ffb3 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	48aa      	ldr	r0, [pc, #680]	; (8000878 <display7Seg2+0x37c>)
 80005ce:	f000 ffad 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	48a7      	ldr	r0, [pc, #668]	; (8000878 <display7Seg2+0x37c>)
 80005da:	f000 ffa7 	bl	800152c <HAL_GPIO_WritePin>
				   break;
 80005de:	e147      	b.n	8000870 <display7Seg2+0x374>

			case 2:
			       HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	48a4      	ldr	r0, [pc, #656]	; (8000878 <display7Seg2+0x37c>)
 80005e6:	f000 ffa1 	bl	800152c <HAL_GPIO_WritePin>
			       HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	48a2      	ldr	r0, [pc, #648]	; (8000878 <display7Seg2+0x37c>)
 80005f0:	f000 ff9c 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	489f      	ldr	r0, [pc, #636]	; (8000878 <display7Seg2+0x37c>)
 80005fc:	f000 ff96 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000606:	489c      	ldr	r0, [pc, #624]	; (8000878 <display7Seg2+0x37c>)
 8000608:	f000 ff90 	bl	800152c <HAL_GPIO_WritePin>
			       HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	4899      	ldr	r0, [pc, #612]	; (8000878 <display7Seg2+0x37c>)
 8000614:	f000 ff8a 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061e:	4896      	ldr	r0, [pc, #600]	; (8000878 <display7Seg2+0x37c>)
 8000620:	f000 ff84 	bl	800152c <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4893      	ldr	r0, [pc, #588]	; (8000878 <display7Seg2+0x37c>)
 800062c:	f000 ff7e 	bl	800152c <HAL_GPIO_WritePin>
				  break;
 8000630:	e11e      	b.n	8000870 <display7Seg2+0x374>
			case 3:
				  HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4890      	ldr	r0, [pc, #576]	; (8000878 <display7Seg2+0x37c>)
 8000638:	f000 ff78 	bl	800152c <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	488d      	ldr	r0, [pc, #564]	; (8000878 <display7Seg2+0x37c>)
 8000642:	f000 ff73 	bl	800152c <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	488a      	ldr	r0, [pc, #552]	; (8000878 <display7Seg2+0x37c>)
 800064e:	f000 ff6d 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	4887      	ldr	r0, [pc, #540]	; (8000878 <display7Seg2+0x37c>)
 800065a:	f000 ff67 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	4884      	ldr	r0, [pc, #528]	; (8000878 <display7Seg2+0x37c>)
 8000666:	f000 ff61 	bl	800152c <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4881      	ldr	r0, [pc, #516]	; (8000878 <display7Seg2+0x37c>)
 8000672:	f000 ff5b 	bl	800152c <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	487e      	ldr	r0, [pc, #504]	; (8000878 <display7Seg2+0x37c>)
 800067e:	f000 ff55 	bl	800152c <HAL_GPIO_WritePin>
			    break;
 8000682:	e0f5      	b.n	8000870 <display7Seg2+0x374>
			case 4:
				  HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	487b      	ldr	r0, [pc, #492]	; (8000878 <display7Seg2+0x37c>)
 800068a:	f000 ff4f 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	4879      	ldr	r0, [pc, #484]	; (8000878 <display7Seg2+0x37c>)
 8000694:	f000 ff4a 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	4876      	ldr	r0, [pc, #472]	; (8000878 <display7Seg2+0x37c>)
 80006a0:	f000 ff44 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	4873      	ldr	r0, [pc, #460]	; (8000878 <display7Seg2+0x37c>)
 80006ac:	f000 ff3e 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4870      	ldr	r0, [pc, #448]	; (8000878 <display7Seg2+0x37c>)
 80006b8:	f000 ff38 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	486d      	ldr	r0, [pc, #436]	; (8000878 <display7Seg2+0x37c>)
 80006c4:	f000 ff32 	bl	800152c <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	486a      	ldr	r0, [pc, #424]	; (8000878 <display7Seg2+0x37c>)
 80006d0:	f000 ff2c 	bl	800152c <HAL_GPIO_WritePin>
			    break;
 80006d4:	e0cc      	b.n	8000870 <display7Seg2+0x374>
			case 5:
				  HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4867      	ldr	r0, [pc, #412]	; (8000878 <display7Seg2+0x37c>)
 80006dc:	f000 ff26 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	4864      	ldr	r0, [pc, #400]	; (8000878 <display7Seg2+0x37c>)
 80006e6:	f000 ff21 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	4861      	ldr	r0, [pc, #388]	; (8000878 <display7Seg2+0x37c>)
 80006f2:	f000 ff1b 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	485e      	ldr	r0, [pc, #376]	; (8000878 <display7Seg2+0x37c>)
 80006fe:	f000 ff15 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	485b      	ldr	r0, [pc, #364]	; (8000878 <display7Seg2+0x37c>)
 800070a:	f000 ff0f 	bl	800152c <HAL_GPIO_WritePin>
			   	  HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000714:	4858      	ldr	r0, [pc, #352]	; (8000878 <display7Seg2+0x37c>)
 8000716:	f000 ff09 	bl	800152c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	4855      	ldr	r0, [pc, #340]	; (8000878 <display7Seg2+0x37c>)
 8000722:	f000 ff03 	bl	800152c <HAL_GPIO_WritePin>
				break;
 8000726:	e0a3      	b.n	8000870 <display7Seg2+0x374>
			case 6:
				HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	4852      	ldr	r0, [pc, #328]	; (8000878 <display7Seg2+0x37c>)
 800072e:	f000 fefd 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	4850      	ldr	r0, [pc, #320]	; (8000878 <display7Seg2+0x37c>)
 8000738:	f000 fef8 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	484d      	ldr	r0, [pc, #308]	; (8000878 <display7Seg2+0x37c>)
 8000744:	f000 fef2 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	484a      	ldr	r0, [pc, #296]	; (8000878 <display7Seg2+0x37c>)
 8000750:	f000 feec 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <display7Seg2+0x37c>)
 800075c:	f000 fee6 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	4844      	ldr	r0, [pc, #272]	; (8000878 <display7Seg2+0x37c>)
 8000768:	f000 fee0 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	4841      	ldr	r0, [pc, #260]	; (8000878 <display7Seg2+0x37c>)
 8000774:	f000 feda 	bl	800152c <HAL_GPIO_WritePin>
				break;
 8000778:	e07a      	b.n	8000870 <display7Seg2+0x374>
			case 7:
				HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	483e      	ldr	r0, [pc, #248]	; (8000878 <display7Seg2+0x37c>)
 8000780:	f000 fed4 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	483b      	ldr	r0, [pc, #236]	; (8000878 <display7Seg2+0x37c>)
 800078a:	f000 fecf 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4838      	ldr	r0, [pc, #224]	; (8000878 <display7Seg2+0x37c>)
 8000796:	f000 fec9 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	4835      	ldr	r0, [pc, #212]	; (8000878 <display7Seg2+0x37c>)
 80007a2:	f000 fec3 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4832      	ldr	r0, [pc, #200]	; (8000878 <display7Seg2+0x37c>)
 80007ae:	f000 febd 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	482f      	ldr	r0, [pc, #188]	; (8000878 <display7Seg2+0x37c>)
 80007ba:	f000 feb7 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	482c      	ldr	r0, [pc, #176]	; (8000878 <display7Seg2+0x37c>)
 80007c6:	f000 feb1 	bl	800152c <HAL_GPIO_WritePin>
				break;
 80007ca:	e051      	b.n	8000870 <display7Seg2+0x374>
			case 8:
				HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4829      	ldr	r0, [pc, #164]	; (8000878 <display7Seg2+0x37c>)
 80007d2:	f000 feab 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4827      	ldr	r0, [pc, #156]	; (8000878 <display7Seg2+0x37c>)
 80007dc:	f000 fea6 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <display7Seg2+0x37c>)
 80007e8:	f000 fea0 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <display7Seg2+0x37c>)
 80007f4:	f000 fe9a 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	481e      	ldr	r0, [pc, #120]	; (8000878 <display7Seg2+0x37c>)
 8000800:	f000 fe94 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080a:	481b      	ldr	r0, [pc, #108]	; (8000878 <display7Seg2+0x37c>)
 800080c:	f000 fe8e 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4818      	ldr	r0, [pc, #96]	; (8000878 <display7Seg2+0x37c>)
 8000818:	f000 fe88 	bl	800152c <HAL_GPIO_WritePin>
				break;
 800081c:	e028      	b.n	8000870 <display7Seg2+0x374>
			case 9:
				HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <display7Seg2+0x37c>)
 8000824:	f000 fe82 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <display7Seg2+0x37c>)
 800082e:	f000 fe7d 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <display7Seg2+0x37c>)
 800083a:	f000 fe77 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <display7Seg2+0x37c>)
 8000846:	f000 fe71 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <display7Seg2+0x37c>)
 8000852:	f000 fe6b 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <display7Seg2+0x37c>)
 800085e:	f000 fe65 	bl	800152c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <display7Seg2+0x37c>)
 800086a:	f000 fe5f 	bl	800152c <HAL_GPIO_WritePin>
				break;
 800086e:	bf00      	nop

	}
	}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010c00 	.word	0x40010c00

0800087c <LEDREDX>:
	void LEDREDX(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
			int counter1 = 5;
 8000882:	2305      	movs	r3, #5
 8000884:	607b      	str	r3, [r7, #4]
			int counter2 = 3;
 8000886:	2303      	movs	r3, #3
 8000888:	603b      	str	r3, [r7, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800088a:	2101      	movs	r1, #1
 800088c:	4834      	ldr	r0, [pc, #208]	; (8000960 <LEDREDX+0xe4>)
 800088e:	f000 fe65 	bl	800155c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8000892:	2120      	movs	r1, #32
 8000894:	4832      	ldr	r0, [pc, #200]	; (8000960 <LEDREDX+0xe4>)
 8000896:	f000 fe61 	bl	800155c <HAL_GPIO_TogglePin>
			display7SEG(counter1);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fc56 	bl	800014c <display7SEG>
			display7Seg2(counter2);
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	f7ff fe2b 	bl	80004fc <display7Seg2>
			HAL_Delay(1000);
 80008a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008aa:	f000 fbc1 	bl	8001030 <HAL_Delay>
			counter1--;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
			counter2--;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	603b      	str	r3, [r7, #0]
			display7SEG(counter1);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fc46 	bl	800014c <display7SEG>
			display7Seg2(counter2);
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f7ff fe1b 	bl	80004fc <display7Seg2>
			HAL_Delay(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f000 fbb1 	bl	8001030 <HAL_Delay>
			counter1--;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
			counter2--;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	603b      	str	r3, [r7, #0]
			display7SEG(counter1);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fc36 	bl	800014c <display7SEG>
			display7Seg2(counter2);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f7ff fe0b 	bl	80004fc <display7Seg2>
			HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fba1 	bl	8001030 <HAL_Delay>
			counter1--;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
			counter2 = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
			HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80008f8:	2120      	movs	r1, #32
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <LEDREDX+0xe4>)
 80008fc:	f000 fe2e 	bl	800155c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000900:	2110      	movs	r1, #16
 8000902:	4817      	ldr	r0, [pc, #92]	; (8000960 <LEDREDX+0xe4>)
 8000904:	f000 fe2a 	bl	800155c <HAL_GPIO_TogglePin>
			display7SEG(counter1);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fc1f 	bl	800014c <display7SEG>
			display7Seg2(counter2);
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f7ff fdf4 	bl	80004fc <display7Seg2>
			HAL_Delay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f000 fb8a 	bl	8001030 <HAL_Delay>
			counter1--;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
			counter2--;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	603b      	str	r3, [r7, #0]
			display7SEG(counter1);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fc0f 	bl	800014c <display7SEG>
			display7Seg2(counter2);
 800092e:	6838      	ldr	r0, [r7, #0]
 8000930:	f7ff fde4 	bl	80004fc <display7Seg2>
			HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f000 fb7a 	bl	8001030 <HAL_Delay>
			counter1--;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
			counter2--;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	603b      	str	r3, [r7, #0]
			HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000948:	2110      	movs	r1, #16
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <LEDREDX+0xe4>)
 800094c:	f000 fe06 	bl	800155c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000950:	2101      	movs	r1, #1
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <LEDREDX+0xe4>)
 8000954:	f000 fe02 	bl	800155c <HAL_GPIO_TogglePin>

			}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010c00 	.word	0x40010c00

08000964 <LEDGREENX>:

	void LEDGREENX(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
		int counter1 = 3;
 800096a:	2303      	movs	r3, #3
 800096c:	607b      	str	r3, [r7, #4]
		int counter2 = 5;
 800096e:	2305      	movs	r3, #5
 8000970:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000972:	2104      	movs	r1, #4
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <LEDGREENX+0x90>)
 8000976:	f000 fdf1 	bl	800155c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800097a:	2108      	movs	r1, #8
 800097c:	481d      	ldr	r0, [pc, #116]	; (80009f4 <LEDGREENX+0x90>)
 800097e:	f000 fded 	bl	800155c <HAL_GPIO_TogglePin>
		display7SEG(counter1);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fbe2 	bl	800014c <display7SEG>
		display7Seg2(counter2);
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff fdb7 	bl	80004fc <display7Seg2>
		HAL_Delay(1000);
 800098e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000992:	f000 fb4d 	bl	8001030 <HAL_Delay>
		counter1--;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
		counter2--;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3b01      	subs	r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
		display7SEG(counter1);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fbd2 	bl	800014c <display7SEG>
		display7Seg2(counter2);
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f7ff fda7 	bl	80004fc <display7Seg2>
		HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fb3d 	bl	8001030 <HAL_Delay>
		counter1--;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
		counter2--;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
		display7SEG(counter1);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fbc2 	bl	800014c <display7SEG>
		display7Seg2(counter2);
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff fd97 	bl	80004fc <display7Seg2>
		HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f000 fb2d 	bl	8001030 <HAL_Delay>
		counter1--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3b01      	subs	r3, #1
 80009da:	607b      	str	r3, [r7, #4]
		counter2--;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3b01      	subs	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80009e2:	2104      	movs	r1, #4
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <LEDGREENX+0x90>)
 80009e6:	f000 fdb9 	bl	800155c <HAL_GPIO_TogglePin>
	}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <LEDYELLOWX>:
	void LEDYELLOWX(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
		int counter1 = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
		int counter2 = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a06:	2102      	movs	r1, #2
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <LEDYELLOWX+0x70>)
 8000a0a:	f000 fda7 	bl	800155c <HAL_GPIO_TogglePin>
		display7SEG(counter1);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fb9c 	bl	800014c <display7SEG>
		display7Seg2(counter2);
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f7ff fd71 	bl	80004fc <display7Seg2>
		HAL_Delay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1e:	f000 fb07 	bl	8001030 <HAL_Delay>
		counter1--;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
		counter2--;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	603b      	str	r3, [r7, #0]
		display7SEG(counter1);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fb8c 	bl	800014c <display7SEG>
		display7Seg2(counter2);
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f7ff fd61 	bl	80004fc <display7Seg2>
		HAL_Delay(1000);
 8000a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3e:	f000 faf7 	bl	8001030 <HAL_Delay>
		counter1--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
		counter2--;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <LEDYELLOWX+0x70>)
 8000a52:	f000 fd83 	bl	800155c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000a56:	2108      	movs	r1, #8
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <LEDYELLOWX+0x70>)
 8000a5a:	f000 fd7f 	bl	800155c <HAL_GPIO_TogglePin>
	}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <Exercise5>:
	void Exercise5(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
		LEDREDX();
 8000a70:	f7ff ff04 	bl	800087c <LEDREDX>
		LEDGREENX();
 8000a74:	f7ff ff76 	bl	8000964 <LEDGREENX>
		LEDYELLOWX();
 8000a78:	f7ff ffbe 	bl	80009f8 <LEDYELLOWX>
	}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <timerRun>:

void setTimer1(int duration){
	timer1_counter = duration;
	timer1_flag = 0 ;
}
void timerRun(){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <timerRun+0x2c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	dd0b      	ble.n	8000aa4 <timerRun+0x24>
		timer1_counter--;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <timerRun+0x2c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <timerRun+0x2c>)
 8000a94:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0 ){
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <timerRun+0x2c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dc02      	bgt.n	8000aa4 <timerRun+0x24>
			timer1_flag = 1;
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <timerRun+0x30>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aba:	f000 fa99 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abe:	f000 f895 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac2:	f000 f91b 	bl	8000cfc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ac6:	f000 f8cd 	bl	8000c64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	4844      	ldr	r0, [pc, #272]	; (8000be0 <main+0x12c>)
 8000ad0:	f000 fd2c 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	4841      	ldr	r0, [pc, #260]	; (8000be0 <main+0x12c>)
 8000ada:	f000 fd27 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	483f      	ldr	r0, [pc, #252]	; (8000be0 <main+0x12c>)
 8000ae4:	f000 fd22 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	483d      	ldr	r0, [pc, #244]	; (8000be4 <main+0x130>)
 8000aee:	f000 fd1d 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	483b      	ldr	r0, [pc, #236]	; (8000be4 <main+0x130>)
 8000af8:	f000 fd18 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	4838      	ldr	r0, [pc, #224]	; (8000be4 <main+0x130>)
 8000b02:	f000 fd13 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4836      	ldr	r0, [pc, #216]	; (8000be4 <main+0x130>)
 8000b0c:	f000 fd0e 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4833      	ldr	r0, [pc, #204]	; (8000be4 <main+0x130>)
 8000b16:	f000 fd09 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	4831      	ldr	r0, [pc, #196]	; (8000be4 <main+0x130>)
 8000b20:	f000 fd04 	bl	800152c <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	482d      	ldr	r0, [pc, #180]	; (8000be0 <main+0x12c>)
 8000b2c:	f000 fcfe 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	482a      	ldr	r0, [pc, #168]	; (8000be0 <main+0x12c>)
 8000b38:	f000 fcf8 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4827      	ldr	r0, [pc, #156]	; (8000be0 <main+0x12c>)
 8000b44:	f000 fcf2 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4824      	ldr	r0, [pc, #144]	; (8000be0 <main+0x12c>)
 8000b50:	f000 fcec 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5a:	4821      	ldr	r0, [pc, #132]	; (8000be0 <main+0x12c>)
 8000b5c:	f000 fce6 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <main+0x12c>)
 8000b68:	f000 fce0 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <main+0x12c>)
 8000b74:	f000 fcda 	bl	800152c <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(Seg2_0_GPIO_Port, Seg2_0_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4819      	ldr	r0, [pc, #100]	; (8000be4 <main+0x130>)
 8000b7e:	f000 fcd5 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_1_GPIO_Port, Seg2_1_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	4817      	ldr	r0, [pc, #92]	; (8000be4 <main+0x130>)
 8000b88:	f000 fcd0 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_2_GPIO_Port, Seg2_2_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <main+0x130>)
 8000b94:	f000 fcca 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_3_GPIO_Port, Seg2_3_Pin, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <main+0x130>)
 8000ba0:	f000 fcc4 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_4_GPIO_Port, Seg2_4_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <main+0x130>)
 8000bac:	f000 fcbe 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_5_GPIO_Port, Seg2_5_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <main+0x130>)
 8000bb8:	f000 fcb8 	bl	800152c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(Seg2_6_GPIO_Port, Seg2_6_Pin, SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <main+0x130>)
 8000bc4:	f000 fcb2 	bl	800152c <HAL_GPIO_WritePin>

   HAL_TIM_Base_Start(&htim2);
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <main+0x134>)
 8000bca:	f001 f95b 	bl	8001e84 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  	  	Exercise5();
 8000bce:	f7ff ff4d 	bl	8000a6c <Exercise5>
	  	  	counter1--;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
	  	  	counter2--;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	603b      	str	r3, [r7, #0]
	  	  	Exercise5();
 8000bde:	e7f6      	b.n	8000bce <main+0x11a>
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	20000030 	.word	0x20000030

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b090      	sub	sp, #64	; 0x40
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	2228      	movs	r2, #40	; 0x28
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fd36 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2310      	movs	r3, #16
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fcb4 	bl	8001590 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f8c5 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 ff20 	bl	8001a90 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f8b1 	bl	8000dbc <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3740      	adds	r7, #64	; 0x40
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c98:	2209      	movs	r2, #9
 8000c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000caa:	f001 f89b 	bl	8001de4 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cb4:	f000 f882 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000cc6:	f001 fa5d 	bl	8002184 <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 f874 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000ce2:	f001 fc35 	bl	8002550 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f866 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000030 	.word	0x20000030

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_GPIO_Init+0xa0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000d40:	2200      	movs	r2, #0
 8000d42:	f647 71e1 	movw	r1, #32737	; 0x7fe1
 8000d46:	4816      	ldr	r0, [pc, #88]	; (8000da0 <MX_GPIO_Init+0xa4>)
 8000d48:	f000 fbf0 	bl	800152c <HAL_GPIO_WritePin>
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|Seg2_4_Pin
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_GPIO_Init+0xa8>)
 8000d54:	f000 fbea 	bl	800152c <HAL_GPIO_WritePin>
                          |Seg2_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8000d58:	f647 73e1 	movw	r3, #32737	; 0x7fe1
 8000d5c:	60bb      	str	r3, [r7, #8]
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0xa4>)
 8000d72:	f000 fa61 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin Seg2_4_Pin
                           Seg2_5_Pin Seg2_6_Pin LED4_Pin LED5_Pin
                           LED6_Pin Seg2_0_Pin Seg2_1_Pin Seg2_2_Pin
                           Seg2_3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|Seg2_4_Pin
 8000d76:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d7a:	60bb      	str	r3, [r7, #8]
                          |Seg2_5_Pin|Seg2_6_Pin|LED4_Pin|LED5_Pin
                          |LED6_Pin|Seg2_0_Pin|Seg2_1_Pin|Seg2_2_Pin
                          |Seg2_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_GPIO_Init+0xa8>)
 8000d90:	f000 fa52 	bl	8001238 <HAL_GPIO_Init>

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
		timerRun();
 8000db0:	f7ff fe66 	bl	8000a80 <timerRun>
	}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_MspInit+0x5c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x5c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x60>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_MspInit+0x60>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d113      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	201c      	movs	r0, #28
 8000e5c:	f000 f9c1 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e60:	201c      	movs	r0, #28
 8000e62:	f000 f9da 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	2019      	movs	r0, #25
 8000e8a:	f000 f9aa 	bl	80011e2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e8e:	2019      	movs	r0, #25
 8000e90:	f000 f9c3 	bl	800121a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_InitTick+0x9c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_InitTick+0x9c>)
 8000e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_InitTick+0x9c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eac:	f107 0210 	add.w	r2, r7, #16
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 ff46 	bl	8001d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ebc:	f000 ff30 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 8000ec0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_InitTick+0xa0>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_InitTick+0xa8>)
 8000ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_InitTick+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_InitTick+0xa4>)
 8000ef2:	f000 ff77 	bl	8001de4 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_InitTick+0xa4>)
 8000efe:	f001 f805 	bl	8001f0c <HAL_TIM_Base_Start_IT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	40012c00 	.word	0x40012c00

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_UP_IRQHandler+0x10>)
 8000f76:	f001 f815 	bl	8001fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000078 	.word	0x20000078

08000f84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <TIM2_IRQHandler+0x10>)
 8000f8a:	f001 f80b 	bl	8001fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000030 	.word	0x20000030

08000f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:
 8000fa4:	f7ff fff8 	bl	8000f98 <SystemInit>
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopFillZerobss+0xe>)
 8000faa:	490c      	ldr	r1, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x16>)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:
 8000fb2:	58d4      	ldr	r4, [r2, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:
 8000fb8:	18c4      	adds	r4, r0, r3
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <LoopFillZerobss+0x1a>)
 8000fc0:	4c09      	ldr	r4, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x1e>)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:
 8000fca:	42a2      	cmp	r2, r4
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
 8000fce:	f001 fb29 	bl	8002624 <__libc_init_array>
 8000fd2:	f7ff fd6f 	bl	8000ab4 <main>
 8000fd6:	4770      	bx	lr
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	080026c8 	.word	0x080026c8
 8000fe4:	2000000c 	.word	0x2000000c
 8000fe8:	200000c4 	.word	0x200000c4

08000fec <ADC1_2_IRQHandler>:
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f8e3 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	200f      	movs	r0, #15
 8001008:	f7ff ff34 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fedc 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <HAL_GetTick+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	200000c0 	.word	0x200000c0

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff fff0 	bl	800101c <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffe0 	bl	800101c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff4f 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff64 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ffb2 	bl	8001168 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff81 	bl	8001114 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff57 	bl	80010dc <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	; 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e148      	b.n	80014de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800124c:	2201      	movs	r2, #1
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8137 	bne.w	80014d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4aa3      	ldr	r2, [pc, #652]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001274:	4aa1      	ldr	r2, [pc, #644]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d875      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800127a:	4aa1      	ldr	r2, [pc, #644]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001280:	4a9f      	ldr	r2, [pc, #636]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d86f      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001286:	4a9f      	ldr	r2, [pc, #636]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d052      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 800128c:	4a9d      	ldr	r2, [pc, #628]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d869      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001292:	4a9d      	ldr	r2, [pc, #628]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d04c      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001298:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d863      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800129e:	4a9b      	ldr	r2, [pc, #620]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d046      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 80012a4:	4a99      	ldr	r2, [pc, #612]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d85d      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d82a      	bhi.n	8001304 <HAL_GPIO_Init+0xcc>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d859      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_GPIO_Init+0x80>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001333 	.word	0x08001333
 80012bc:	0800130d 	.word	0x0800130d
 80012c0:	0800131f 	.word	0x0800131f
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	08001367 	.word	0x08001367
 80012d4:	08001367 	.word	0x08001367
 80012d8:	08001367 	.word	0x08001367
 80012dc:	08001367 	.word	0x08001367
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001315 	.word	0x08001315
 8001300:	08001329 	.word	0x08001329
 8001304:	4a82      	ldr	r2, [pc, #520]	; (8001510 <HAL_GPIO_Init+0x2d8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130a:	e02c      	b.n	8001366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e029      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e024      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3308      	adds	r3, #8
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e01f      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	330c      	adds	r3, #12
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e01a      	b.n	8001368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133a:	2304      	movs	r3, #4
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e013      	b.n	8001368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	611a      	str	r2, [r3, #16]
          break;
 8001352:	e009      	b.n	8001368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
          break;
 800135e:	e003      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x130>
          break;
 8001366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	; 0xff
 800136c:	d801      	bhi.n	8001372 <HAL_GPIO_Init+0x13a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_Init+0x13e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d802      	bhi.n	8001384 <HAL_GPIO_Init+0x14c>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x152>
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	3b08      	subs	r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	210f      	movs	r1, #15
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8090 	beq.w	80014d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d0:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1e0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a47      	ldr	r2, [pc, #284]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1d8>
 800140c:	2302      	movs	r3, #2
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001410:	2303      	movs	r3, #3
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001418:	2300      	movs	r3, #0
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142a:	493b      	ldr	r1, [pc, #236]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	4933      	ldr	r1, [pc, #204]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800145c:	4013      	ands	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	492d      	ldr	r1, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4929      	ldr	r1, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001484:	4013      	ands	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4923      	ldr	r1, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4919      	ldr	r1, [pc, #100]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4915      	ldr	r1, [pc, #84]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3301      	adds	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f aeaf 	bne.w	800124c <HAL_GPIO_Init+0x14>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	372c      	adds	r7, #44	; 0x2c
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	10320000 	.word	0x10320000
 8001500:	10310000 	.word	0x10310000
 8001504:	10220000 	.word	0x10220000
 8001508:	10210000 	.word	0x10210000
 800150c:	10120000 	.word	0x10120000
 8001510:	10110000 	.word	0x10110000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40011000 	.word	0x40011000
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43d9      	mvns	r1, r3
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	400b      	ands	r3, r1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	611a      	str	r2, [r3, #16]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e26c      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8087 	beq.w	80016be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b0:	4b92      	ldr	r3, [pc, #584]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d00c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015bc:	4b8f      	ldr	r3, [pc, #572]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d112      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
 80015c8:	4b8c      	ldr	r3, [pc, #560]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d10b      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	4b89      	ldr	r3, [pc, #548]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d06c      	beq.n	80016bc <HAL_RCC_OscConfig+0x12c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d168      	bne.n	80016bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e246      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x76>
 80015f8:	4b80      	ldr	r3, [pc, #512]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a7f      	ldr	r2, [pc, #508]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e02e      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7a      	ldr	r2, [pc, #488]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a77      	ldr	r2, [pc, #476]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xbc>
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a71      	ldr	r2, [pc, #452]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6e      	ldr	r2, [pc, #440]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 800164c:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6a      	ldr	r2, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a67      	ldr	r2, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fcd6 	bl	800101c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fcd2 	bl	800101c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1fa      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xe4>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fcc2 	bl	800101c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fcbe 	bl	800101c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1e6      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x10c>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ca:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x18c>
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x176>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1ba      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4939      	ldr	r1, [pc, #228]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fc77 	bl	800101c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fc73 	bl	800101c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e19b      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4927      	ldr	r1, [pc, #156]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x270>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fc56 	bl	800101c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fc52 	bl	800101c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e17a      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d03a      	beq.n	8001814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d019      	beq.n	80017da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fc36 	bl	800101c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc32 	bl	800101c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e15a      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_OscConfig+0x26c>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f000 fae8 	bl	8001da8 <RCC_Delay>
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_OscConfig+0x274>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fc1c 	bl	800101c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e6:	e00f      	b.n	8001808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fc18 	bl	800101c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d908      	bls.n	8001808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e140      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	42420000 	.word	0x42420000
 8001804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e9      	bne.n	80017e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a6 	beq.w	800196e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b97      	ldr	r3, [pc, #604]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b94      	ldr	r3, [pc, #592]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a93      	ldr	r2, [pc, #588]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b91      	ldr	r3, [pc, #580]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b8b      	ldr	r3, [pc, #556]	; (8001a88 <HAL_RCC_OscConfig+0x4f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <HAL_RCC_OscConfig+0x4f8>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fbd9 	bl	800101c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fbd5 	bl	800101c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0fd      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <HAL_RCC_OscConfig+0x4f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x312>
 8001894:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	e02d      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x334>
 80018aa:	4b76      	ldr	r3, [pc, #472]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a75      	ldr	r2, [pc, #468]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a72      	ldr	r2, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	e01c      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x356>
 80018cc:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a6c      	ldr	r2, [pc, #432]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x36e>
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a66      	ldr	r2, [pc, #408]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d015      	beq.n	8001932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb89 	bl	800101c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fb85 	bl	800101c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0ab      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	4b57      	ldr	r3, [pc, #348]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ee      	beq.n	800190e <HAL_RCC_OscConfig+0x37e>
 8001930:	e014      	b.n	800195c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb73 	bl	800101c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fb6f 	bl	800101c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e095      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ee      	bne.n	800193a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d105      	bne.n	800196e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001962:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8081 	beq.w	8001a7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d061      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d146      	bne.n	8001a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198c:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_OscConfig+0x4fc>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb43 	bl	800101c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fb3f 	bl	800101c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e067      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d108      	bne.n	80019d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	492d      	ldr	r1, [pc, #180]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a19      	ldr	r1, [r3, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	430b      	orrs	r3, r1
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_OscConfig+0x4fc>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fb13 	bl	800101c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff fb0f 	bl	800101c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e037      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x46a>
 8001a18:	e02f      	b.n	8001a7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_RCC_OscConfig+0x4fc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fafc 	bl	800101c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff faf8 	bl	800101c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e020      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x498>
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e013      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42420060 	.word	0x42420060

08001a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0d0      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4965      	ldr	r1, [pc, #404]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d040      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e073      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06b      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4936      	ldr	r1, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff fa4c 	bl	800101c <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff fa48 	bl	800101c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e053      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d210      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1cc>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1d0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f918 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08002694 	.word	0x08002694
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x36>
 8001c92:	e027      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e027      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0c5b      	lsrs	r3, r3, #17
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce6:	613b      	str	r3, [r7, #16]
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	693b      	ldr	r3, [r7, #16]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	007a1200 	.word	0x007a1200
 8001d00:	080026ac 	.word	0x080026ac
 8001d04:	080026bc 	.word	0x080026bc
 8001d08:	003d0900 	.word	0x003d0900

08001d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff fff2 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	080026a4 	.word	0x080026a4

08001d48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	220f      	movs	r2, #15
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_GetClockConfig+0x58>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0207 	and.w	r2, r3, #7
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40022000 	.word	0x40022000

08001da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <RCC_Delay+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <RCC_Delay+0x38>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0a5b      	lsrs	r3, r3, #9
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc4:	bf00      	nop
  }
  while (Delay --);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <RCC_Delay+0x1c>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e041      	b.n	8001e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f80e 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f000 fa9a 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d001      	beq.n	8001e9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e02d      	b.n	8001ef8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_TIM_Base_Start+0x80>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_TIM_Base_Start+0x3e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_TIM_Base_Start+0x3e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_TIM_Base_Start+0x84>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d111      	bne.n	8001ee6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b06      	cmp	r3, #6
 8001ed2:	d010      	beq.n	8001ef6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	e007      	b.n	8001ef6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400

08001f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d001      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e035      	b.n	8001f90 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_TIM_Base_Start_IT+0x90>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_TIM_Base_Start_IT+0x4e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4e:	d004      	beq.n	8001f5a <HAL_TIM_Base_Start_IT+0x4e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_TIM_Base_Start_IT+0x94>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d111      	bne.n	8001f7e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d010      	beq.n	8001f8e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7c:	e007      	b.n	8001f8e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40000400 	.word	0x40000400

08001fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0202 	mvn.w	r2, #2
 8001fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f998 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f98b 	bl	8002312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f99a 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0204 	mvn.w	r2, #4
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f972 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f965 	bl	8002312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f974 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f94c 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f93f 	bl	8002312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f94e 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d020      	beq.n	80020ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0210 	mvn.w	r2, #16
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2208      	movs	r2, #8
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f926 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f919 	bl	8002312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f928 	bl	8002336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fe4c 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa6f 	bl	8002612 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8f8 	bl	8002348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa42 	bl	8002600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_ConfigClockSource+0x1c>
 800219c:	2302      	movs	r3, #2
 800219e:	e0b4      	b.n	800230a <HAL_TIM_ConfigClockSource+0x186>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d8:	d03e      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0xd4>
 80021da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021de:	f200 8087 	bhi.w	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e6:	f000 8086 	beq.w	80022f6 <HAL_TIM_ConfigClockSource+0x172>
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ee:	d87f      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d01a      	beq.n	800222a <HAL_TIM_ConfigClockSource+0xa6>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d87b      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b60      	cmp	r3, #96	; 0x60
 80021fa:	d050      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x11a>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d877      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b50      	cmp	r3, #80	; 0x50
 8002202:	d03c      	beq.n	800227e <HAL_TIM_ConfigClockSource+0xfa>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d873      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d058      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x13a>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d86f      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b30      	cmp	r3, #48	; 0x30
 8002212:	d064      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d86b      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d060      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x15a>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d867      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d05c      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x15a>
 8002224:	2b10      	cmp	r3, #16
 8002226:	d05a      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	e062      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f000 f96a 	bl	8002512 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800224c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	609a      	str	r2, [r3, #8]
      break;
 8002256:	e04f      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f000 f953 	bl	8002512 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227a:	609a      	str	r2, [r3, #8]
      break;
 800227c:	e03c      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f000 f8ca 	bl	8002424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2150      	movs	r1, #80	; 0x50
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f921 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 800229c:	e02c      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f000 f8e8 	bl	8002480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2160      	movs	r1, #96	; 0x60
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f911 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 80022bc:	e01c      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f000 f8aa 	bl	8002424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f901 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 80022dc:	e00c      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f000 f8f8 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 80022ee:	e003      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e000      	b.n	80022f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
	...

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <TIM_Base_SetConfig+0xc0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_Base_SetConfig+0x28>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0x28>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <TIM_Base_SetConfig+0xc4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d108      	bne.n	8002396 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <TIM_Base_SetConfig+0xc0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0x52>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x52>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <TIM_Base_SetConfig+0xc4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0d      	ldr	r2, [pc, #52]	; (800241c <TIM_Base_SetConfig+0xc0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f023 0201 	bic.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]
  }
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400

08002424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0201 	bic.w	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 030a 	bic.w	r3, r3, #10
 8002460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	621a      	str	r2, [r3, #32]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0210 	bic.w	r2, r3, #16
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f043 0307 	orr.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002512:	b480      	push	{r7}
 8002514:	b087      	sub	sp, #28
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	431a      	orrs	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4313      	orrs	r3, r2
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002564:	2302      	movs	r3, #2
 8002566:	e041      	b.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d004      	beq.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400

08002600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <__libc_init_array>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	2600      	movs	r6, #0
 8002628:	4d0c      	ldr	r5, [pc, #48]	; (800265c <__libc_init_array+0x38>)
 800262a:	4c0d      	ldr	r4, [pc, #52]	; (8002660 <__libc_init_array+0x3c>)
 800262c:	1b64      	subs	r4, r4, r5
 800262e:	10a4      	asrs	r4, r4, #2
 8002630:	42a6      	cmp	r6, r4
 8002632:	d109      	bne.n	8002648 <__libc_init_array+0x24>
 8002634:	f000 f822 	bl	800267c <_init>
 8002638:	2600      	movs	r6, #0
 800263a:	4d0a      	ldr	r5, [pc, #40]	; (8002664 <__libc_init_array+0x40>)
 800263c:	4c0a      	ldr	r4, [pc, #40]	; (8002668 <__libc_init_array+0x44>)
 800263e:	1b64      	subs	r4, r4, r5
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	42a6      	cmp	r6, r4
 8002644:	d105      	bne.n	8002652 <__libc_init_array+0x2e>
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	f855 3b04 	ldr.w	r3, [r5], #4
 800264c:	4798      	blx	r3
 800264e:	3601      	adds	r6, #1
 8002650:	e7ee      	b.n	8002630 <__libc_init_array+0xc>
 8002652:	f855 3b04 	ldr.w	r3, [r5], #4
 8002656:	4798      	blx	r3
 8002658:	3601      	adds	r6, #1
 800265a:	e7f2      	b.n	8002642 <__libc_init_array+0x1e>
 800265c:	080026c0 	.word	0x080026c0
 8002660:	080026c0 	.word	0x080026c0
 8002664:	080026c0 	.word	0x080026c0
 8002668:	080026c4 	.word	0x080026c4

0800266c <memset>:
 800266c:	4603      	mov	r3, r0
 800266e:	4402      	add	r2, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	f803 1b01 	strb.w	r1, [r3], #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr
